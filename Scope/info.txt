In this we will learn about Scope:
Scope determines the accessibility of variables, objects, and functions from different parts of the code:
4 Scopes in JavaScript
: Function Scope
: Block Scope
: Global Scope
: Lexical Scope

1 - Function Scope:
Variables defined inside a function are not accessible (visible) from outside the function. (More specific)
eg 
It will give error as sum can only be accessed within the function;
function calSum(a, b){
    let sum = a+b;
    //console.log(sum);
}

calSum(2,5);             
console.log(sum);

2 - Global Scope -> A variable that can be accessed in any function or method
eg Let sum = 10;

function calSum(a,b){
    console.log(sum); will print 10
}

calSum(2,5), will print 8

3 - Block Scope:
Variables declared inside a {} block cannot be accessed from outside the block. (only applicable on const and let keyword)
eg:
{
    let a = 20;
    const b = 10;
}

console.log(a);
console.log(b);
will give error as 
but if we write
{
    var a = 10;
}

console.log(a); it will give result as 10;

4 - Lexical Scope: (We basically use nested function concept here)
A variable defined outside a function can be accessed inside another function defined after the variable declaration.
But the opposite is not True.
eg 
function outerFunc(){
    let x = 5;
    let y = 6;
    function innerFunc(){ //function scope
        console.log(x);
    }
    innerFunc();
}

outerFunc();